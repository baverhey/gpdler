<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- Commons DBCP configuration -->
	<!-- First: a connection factory that creates the connections to the database -->
    <!--
        This will load properties from both files, first the defaults, then the other properties.
        Drop a grsloader.properties somewhere on the classpath (copy the one supplied here) and
        your values will override the defaults here.
    -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:grsloader.default.properties</value>
                <value>classpath:grsloader.properties</value>
            </list>
        </property>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
    </bean>

    <!-- Database configured by properties files -->
    <bean id="xmlDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${grs.db.dburl}" />
        <property name="username" value="${grs.db.username}" />
        <property name="password" value="${grs.db.password}" />
    </bean>
    <jdbc:initialize-database data-source="xmlDataSource">
        <jdbc:script location="classpath:dbschema.sql" />
    </jdbc:initialize-database>
    <bean id="xmltransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="dataSource" ref="xmlDataSource" />
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:annotation-driven transaction-manager="xmltransactionManager" />

    <!-- A hibernate session factory, can be used elsewhere -->
    <bean id="parentSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" abstract="true">
        <property name="dataSource" ref="xmlDataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
            </props>
        </property>
        <!-- we use hibernate/JPA annotations to (hopefully) get everything configured -->
        <property name="packagesToScan" value="net.straininfo2.grs.idloader.bioproject.domain,net.straininfo2.grs.idloader.bioproject.domain.mappings" />
    </bean>
    <bean id="sessionFactory" parent="parentSessionFactory" />
    <!-- hibernateConfiguration is a Configuration object, can be used to dump the config -->
    <!-- Collection class storing categories and providers, based on their name -->
    <bean id="catMap" class="java.util.concurrent.ConcurrentHashMap" />
    <bean id="provMap" class="java.util.concurrent.ConcurrentHashMap" />
    <!-- XML parsing -->
    <bean id="xmlParser" class="net.straininfo2.grs.idloader.bioproject.eutils.EutilsXmlParser">
        <property name="categoryMap" ref="catMap" />
        <property name="providerMap" ref="provMap" />
    </bean>
    <bean id="bioProjectLoader" class="net.straininfo2.grs.idloader.db.BioProjectLoader" />
    <bean id="mappingHandler" class="net.straininfo2.grs.idloader.db.MappingLoader" />
    <bean id="downloader" class="net.straininfo2.grs.idloader.bioproject.eutils.EutilsDownloader">
        <property name="xmlParser" ref="xmlParser" />
        <property name="readTimeout" value="${grs.readTimeout}" />
        <property name="connectTimeout" value="${grs.connectTimeout}" />
        <property name="email" value="${grs.email}" />
    </bean>
	<bean id="loader" class="net.straininfo2.grs.idloader.Loader">
        <property name="downloader" ref="downloader" />
	</bean>
</beans>